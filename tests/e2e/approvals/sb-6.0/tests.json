{
  "6885b5f9a78751992b8e87e54ff1a72621e897fd": {
    "id": "6885b5f9a78751992b8e87e54ff1a72621e897fd",
    "skip": false,
    "browser": "chrome",
    "storyPath": [
      "KindA",
      "Story A"
    ],
    "storyId": "kinda--story-a",
    "story": {
      "id": "kinda--story-a",
      "kind": "KindA",
      "name": "Story A",
      "story": "Story A",
      "parameters": {
        "framework": "react",
        "fileName": "./stories/KindA.stories.tsx",
        "args": {},
        "argTypes": {},
        "__id": "kinda--story-a",
        "__isArgsStory": false
      },
      "args": {},
      "initialArgs": {}
    },
    "fn": "async function storyTest() {\n    var _testFn$call;\n\n    delay ? await new Promise(resolve => setTimeout(resolve, delay)) : void 0;\n    await (((_testFn$call = testFn === null || testFn === void 0 ? void 0 : testFn.call(this)) !== null && _testFn$call !== void 0 ? _testFn$call : this.screenshots.length > 0) ? this.expect(this.screenshots.reduce((screenshots, {\n      imageName,\n      screenshot\n    }, index) => ({ ...screenshots,\n      [imageName !== null && imageName !== void 0 ? imageName : `screenshot_${index}`]: screenshot\n    }), {})).to.matchImages() : this.expect(await this.takeScreenshot()).to.matchImage());\n  }"
  },
  "94fc3ccedeb5d88cef042be60e171eb52b155191": {
    "id": "94fc3ccedeb5d88cef042be60e171eb52b155191",
    "skip": false,
    "browser": "chrome",
    "storyPath": [
      "Docs",
      "KindB",
      "StoryA"
    ],
    "storyId": "docs-kindb--story-a",
    "story": {
      "id": "docs-kindb--story-a",
      "kind": "Docs/KindB",
      "name": "StoryA",
      "story": "StoryA",
      "parameters": {
        "framework": "react",
        "fileName": "./stories/KindB.stories.mdx",
        "creevey": {
          "ignoreElements": [
            "img"
          ],
          "captureElement": "mdx-by-children"
        },
        "args": {},
        "argTypes": {},
        "__id": "docs-kindb--story-a",
        "__isArgsStory": false
      },
      "args": {},
      "initialArgs": {}
    },
    "fn": "async function storyTest() {\n    var _testFn$call;\n\n    delay ? await new Promise(resolve => setTimeout(resolve, delay)) : void 0;\n    await (((_testFn$call = testFn === null || testFn === void 0 ? void 0 : testFn.call(this)) !== null && _testFn$call !== void 0 ? _testFn$call : this.screenshots.length > 0) ? this.expect(this.screenshots.reduce((screenshots, {\n      imageName,\n      screenshot\n    }, index) => ({ ...screenshots,\n      [imageName !== null && imageName !== void 0 ? imageName : `screenshot_${index}`]: screenshot\n    }), {})).to.matchImages() : this.expect(await this.takeScreenshot()).to.matchImage());\n  }"
  }
}